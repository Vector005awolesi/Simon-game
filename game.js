// Select all color buttons and initialize game variables
var allBtn = $(".btn");
var gamePattern = []; // Stores the sequence generated by the game
var userClickedPattern = []; // Stores the sequence entered by the user
var colors = ["red", "blue", "green", "yellow"];
let level = 0; // Tracks the current level
let started = false; // Tracks if the game has started

// Listen for keypress to start the game
$("html").on("keypress", function (event) {
  var startKey = event.key;
  // Start game only if 'a' or 'A' is pressed and game hasn't started yet
  if ((startKey === "a" || startKey === "A") && !started) {
    nextSequence();
    started = true;
    $("h1#level-title").text(`Level ${level}`);
    userClickedPattern = [];
  }
});

// Listen for touchstart to start the game on mobile devices
// Resets all game variables to allow a fresh start
function startOver() {
  level = 0;
  gamePattern = [];
  userClickedPattern = [];
  started = false;
}

  // Set up the click handler ONCE for all color buttons
  allBtn.on("click", function () {
    let id = $(this).attr("id");
    userClickedPattern.push(id); // Add clicked color to user's pattern
    console.log(userClickedPattern);
    checkAnswer(userClickedPattern.length - 1); // Check user's answer
    this.classList.add("pressed"); // Animate button press
    setTimeout(() => {
      this.classList.remove("pressed");
    }, 10);
  });

  // Generates the next color in the sequence and updates the game state
  function nextSequence() {
    userClickedPattern = []; // Reset user's pattern for new level
    level++;
    var randomNumber = Math.floor(Math.random() * 4);
    var randomColor = colors[randomNumber];
    console.log(randomColor);
    gamePattern.push(randomColor); // Add new color to game pattern
    var randomBtn = $(`#${randomColor}`);
    randomBtn.fadeIn(200).fadeOut(200).fadeIn(200); // Animate the button
    // Play sound for the color
    playSound(randomColor);
    $("h1#level-title").text(`Level ${level}`);
  }

  // Checks if the user's input matches the game pattern
  function checkAnswer(currentLevel) {
    if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
      // If user completed the sequence, go to next level after a delay
      if (userClickedPattern.length === gamePattern.length) {
        setTimeout(() => {
          nextSequence();
        }, 1000);
      }
    } else {
      // If user makes a mistake, play wrong sound and reset the game
     playSound("wrong")
      $("body").addClass("game-over");
      setTimeout(() => {
        $("body").removeClass("game-over");
      }, 200);
      $("h1#level-title").text("Game Over, Press A Key to Restart");
      startOver();
    }
  }

  function playSound(name){
       var currentSound = name;
       var sound = new Audio();
       sound.src = `sounds/${currentSound}.mp3`;
       sound.play();
  }

